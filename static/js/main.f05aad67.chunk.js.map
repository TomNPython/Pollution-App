{"version":3,"sources":["components/Headers.js","components/Form.js","components/Pollution.js","App.js","serviceWorker.js","index.js"],"names":["Headers","react_default","a","createElement","className","React","Component","Form","props","onSubmit","getPollution","type","name","placeholder","Pollution","city","pollution","style","backgroundColor","id","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","Number","aqi","stop","this","components_Headers","components_Form","components_Pollution","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f05aad67.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nclass Headers extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n            <div className='title'>Pollution Reader</div>\r\n            <div className='subtitle'>Find Out the Air Pollution Index of your city.</div>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Headers","import React from 'react'\r\n\r\n\r\nconst Form = props => (\r\n\r\n            <form onSubmit={props.getPollution}>\r\n                <input className='form-input' type='text' name='city' placeholder='City...'></input>\r\n                <button>How bad is it?</button>\r\n            </form>\r\n        )\r\n\r\nexport default Form","import React from 'react'\r\n\r\n\r\nconst Pollution = props => (\r\n\t<div>\r\n\t {\t\r\n\t \tprops.city && <p>Location: \r\n\t \t\t<div className='pollution'> { props.city }</div>\r\n\t \t</p> \r\n     }\r\n     {\r\n         props.pollution && <p>AQI: \r\n             <div className='pollution api' style={{backgroundColor: props.pollution >= 300 ? 'brown' : \r\n             props.pollution >= 200 ? 'purple' : \r\n             props.pollution >= 150 ? 'red' :\r\n             props.pollution >= 100 ? 'orange' :\r\n             props.pollution >= 50 ? 'yellow' : 'green'           \r\n             }}> { props.pollution }</div>\r\n         </p>\r\n     }\r\n     <table id='pollution-table'>\r\n                <tr id='title-aqi'>\r\n                    <th>AQI</th>\r\n                    <th>Pollution Level</th>\r\n                    <th>Description</th>\r\n                </tr>\r\n                <tr id='lowest-aqi'>\r\n                    <td>0 - 50</td>\r\n                    <td>Good</td>\r\n                    <td>No Threat.</td>\r\n                </tr>\r\n                <tr id='lower-aqi'>\r\n                    <td>51 - 100</td>\r\n                    <td>Acceptable</td>\r\n                    <td>Minimal Threat. Only dangerous for those with respiratory problems.</td>\r\n                </tr>\r\n                <tr id='middle-aqi'>\r\n                    <td>101 - 150</td>\r\n                    <td>Moderate</td>\r\n                    <td>Unhealthy for sensitive groups. Acceptable for general public.</td>\r\n                </tr>\r\n                <tr id='higher-aqi'>\r\n                    <td>151 - 200</td>\r\n                    <td>Unhealthy</td>\r\n                    <td>Unhealthy for all groups. Dangerous for sensitive groups.</td>\r\n                </tr>\r\n                <tr id='highest-aqi'>\r\n                    <td>201 - 300</td>\r\n                    <td>Very Unhealthy</td>\r\n                    <td>Public health warnings. Entire population affected.</td>\r\n                </tr>\r\n                <tr id='danger-aqi'>\r\n                    <td>300+</td>\r\n                    <td>Dangerous</td>\r\n                    <td>Health alert. Severe problems for entire population.</td>\r\n                </tr>\r\n            </table>\r\n     </div>\r\n)\r\n\r\nexport default Pollution","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Header from './components/Headers';\r\nimport Form from './components/Form';\r\nimport Pollution from './components/Pollution';\r\n\r\nconst API_KEY = \"d9e6fd75680b649a10400865ff5131c4dcc21857\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    city: undefined,\r\n    pollution: undefined,\r\n  }\r\n\r\n  getPollution = async (e) => {\r\n    e.preventDefault();\r\n    const city =  e.target.elements.city.value;\r\n    const api_call = await fetch(`http://api.waqi.info/feed/${city}/?token=${API_KEY}`);\r\n    const data = await api_call.json();\r\n    try {\r\n    this.setState({\r\n      city: data.data.city.name,\r\n      pollution: Number(data.data.aqi)\r\n    })\r\n  } catch (city) {\r\n    this.setState({\r\n      city: \"Unknown City\",\r\n      pollution: \"Unkown AQI\"\r\n    })\r\n  }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <div className='header-container'>\r\n        <Header className='header-container' />\r\n        </div>\r\n        <div className='info-container'>\r\n        <Form getPollution={this.getPollution} />\r\n        <Pollution city={this.state.city} pollution={this.state.pollution} />\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}